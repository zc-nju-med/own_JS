{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "pink",
    "glyph" : "magic"
  },
  "name" : "NBA",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: orange; icon-glyph: basketball-ball;\n\n\/********************************************************\n * script     : NBA-Widget.js\n * version    : 1.1.0\n * author     : thisisevanfox & Nicolas-kings\n * date       : 2021-01-31\n *******************************************************\/\n\n\/************************************************************\n ********************用户设置 *********************\n ************请在首次运行之前进行修改************\n ***********************************************************\/\n\n\/\/\/在此处输入您的NBA球队的缩写。\nconst MY_NBA_TEAM = \"LAL\";\n\n\/\/指示是否应显示实时得分。\n\/\/如果您不想被破坏，请将其设置为false。\n\/\/默认值：true \nconst SHOW_LIVE_SCORES = true;\n\n\/\/指示是否应显示所有分数和统计数据。\n\/\/如果您不想被破坏，请将其设置为false。\n\/\/默认值：true \nconst SHOW_STATS_AND_STANDINGS = true;\n\n\/\/当前季节的开始年份\n\/\/对于2020-21赛季，该值必须为“ 2020”\n\/\/对于2021-22赛季，该值必须为“ 2021”\nconst CURRENT_SEASON_START_YEAR = \"2020\";\n\n\/\/分享应用的网址\n\/\/默认值：“ https:\/\/m.china.nba.com”\n\/\/如果您不想打开任何内容，请输入：\n\/\/const WIDGET_URL =“”; \nconst WIDGET_URL = \"https:\/\/m.china.nba.com\";\n\n\n\n\/\/设置小部件的外观。默认外观设置为系统配色方案。\n\/\/Device.isUsingDarkAppearance（）=系统配色方案（默认）\n\/\/true =窗口小部件将处于黑暗模式。\n\/\/false =窗口小部件将处于亮灯模式。 \nconst DARK_MODE = Device.isUsingDarkAppearance();\nconst ImageMode = true   \/\/选择true时，使用必应壁纸\n\/\/ Indicator if no-background.js is installed\n\/\/ Default: false\n\/\/ @see: https:\/\/github.com\/supermamon\/scriptable-no-background\n\/\/ const NO_BACKGROUND_INSTALLED = false;\n\n\/\/ Indicator if no-background.js should be active\n\/\/ Only matters if NO_BACKGROUND_INSTALLED is true.\n\/\/ const NO_BACKGROUND_ACTIVE = true;\n\n\/\/ Indicator if no-background.js should be active for whole widget\n\/\/ No background for widget and no background for stacks in the widget\n\/\/ Only matters if NO_BACKGROUND_INSTALLED is true.\n\/\/ const NO_BACKGROUND_FULL_ACTIVE = false;\n\n\/********************************************************\n ********************************************************\n *********** DO NOT CHANGE ANYTHING FROM HERE ***********\n ********************************************************\n *******************************************************\/\n\n\/\/ const { transparent } = NO_BACKGROUND_INSTALLED\n\/\/   ? importModule(\"no-background\")\n\/\/   : emptyFunction();\n\nconst WIDGET_BACKGROUND = DARK_MODE ? new Color(\"gray\") : new Color(\"#D6D6D6\");\nconst STACK_BACKGROUND = DARK_MODE\n  ? new Color(\"#1D1D1D\")\n  : new Color(\"#FFFFFF\"); \/\/Smaller Container Background\n\nlet oNbaWidget;\nif (config.runsInWidget) {\n  \/\/ The script runs inside a widget, so we pass our instance of ListWidget to be shown inside the widget on the Home Screen.\n  if (config.widgetFamily === \"small\") {\n    oNbaWidget = await createSmallWidget();\n  }\n  if (config.widgetFamily === \"medium\") {\n    oNbaWidget = await createMediumWidget();\n  }\n  if (config.widgetFamily === \"large\") {\n    oNbaWidget = await createLargeWidget();\n  }\n  Script.setWidget(oNbaWidget);\n} else {\n  \/\/ The script runs inside the app, so we preview the widget medium sized.\n  oNbaWidget = await createMediumWidget();\n  oNbaWidget.presentMedium();\n  oNbaWidget = await createSmallWidget();\n  oNbaWidget.presentSmall();\n  oNbaWidget = await createLargeWidget();\n  oNbaWidget.presentLarge();\n}\n\n\/**\n * Creates small sized widget.\n *\n * @return {ListWidget}\n *\/\nasync function createSmallWidget() {\n  \/\/ Initialise widget\n  const oWidget = new ListWidget();\n  oWidget.backgroundColor = DARK_MODE\n    ? new Color(\"1D1D1D\")\n    : new Color(\"#D6D6D6\");\n  oWidget.setPadding(10, 10, 10, 10);\n  if (WIDGET_URL.length > 0) {\n    oWidget.url = WIDGET_URL;\n  }\n\n  await addSmallWidgetData(oWidget);\n\n  return oWidget;\n}\n\n\/**\n * Creates medium sized widget.\n *\n * @return {ListWidget}\n *\/\nasync function createMediumWidget() {\n  \/\/ Initialise widget\n  const oWidget = new ListWidget();\n  if (ImageMode) {\n    const url = \"https:\/\/area.sinaapp.com\/bingImg\/\"   \/\/使用必应壁纸作为背景时，请注释下面\n    \/\/ const url = \"http:\/\/p1.music.126.net\/uarVFKgUlrI9Z1nr-50cAw==\/109951162843608471.jpg\"     \/\/固定一张图片,这里我选用城南花已开的封面,图片不能太大，容易崩溃\n    const i = await new Request(url);\n    const img = await i.loadImage();\n    oWidget.backgroundImage = await shadowImage(img)\n    \/\/ oWidget.backgroundImage = await transparent(Script.name());\n  } else {\n    oWidget.backgroundColor = WIDGET_BACKGROUND;\n  }\n  oWidget.setPadding(10, 10, 10, 10);\n  if (WIDGET_URL.length > 0) {\n    oWidget.url = WIDGET_URL;\n  }\n\n  await addMediumWidgetData(oWidget);\n\n  return oWidget;\n}\n\n\/**\n * Add data to small sized widget.\n *\n * @param {ListWidget} oWidget\n *\/\nasync function addSmallWidgetData(oWidget) {\n  const oGameData = await prepareData();\n\n  if (oGameData != null) {\n    const oTeamData = getTeamData();\n    const sMyTeam = oTeamData[MY_NBA_TEAM].abbreviation;\n    let oMyTeam;\n    let oOpponentTeam;\n    if (oGameData.homeTeam.abbreviation == sMyTeam) {\n      oMyTeam = oGameData.homeTeam;\n      oOpponentTeam = oGameData.awayTeam;\n    } else {\n      oOpponentTeam = oGameData.homeTeam;\n      oMyTeam = oGameData.awayTeam;\n    }\n\n    const oUpperStack = oWidget.addStack();\n    oUpperStack.layoutHorizontally();\n\n    const oUpperTextStack = oUpperStack.addStack();\n    oUpperTextStack.layoutVertically();\n\n    const dGameDate = new Date(oGameData.gameDate);\n    const dLocalDate = dGameDate.toLocaleString([], {\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n    const oGameDateText = oUpperTextStack.addText(\n      `NBA赛事资讯`\n    );\n    oGameDateText.font = Font.boldSystemFont(12);\n    oGameDateText.textColor = getColorForCurrentAppearance();\n    const oGameTimeText = oUpperTextStack.addText(\n      `${dLocalDate.split(\",\")[0]}`\n    );\n    oGameTimeText.font = Font.boldSystemFont(9);\n    oGameTimeText.textColor = getColorForCurrentAppearance();\n    const oVenueText = oUpperTextStack.addText(`♗ ${oGameData.venue}`);\n    oVenueText.font = Font.boldSystemFont(9);\n    oVenueText.textColor = getColorForCurrentAppearance();\n\n    oUpperStack.addSpacer();\n\n    const oOpponentLogoImage = await loadLogo(\n      oOpponentTeam.logoLink,\n      oOpponentTeam.abbreviation\n    );\n    const oOpponentLogo = oUpperStack.addImage(oOpponentLogoImage);\n    oOpponentLogo.imageSize = new Size(25, 25);\n\n    if (SHOW_STATS_AND_STANDINGS) {\n      oWidget.addSpacer(4);\n\n      const oOpponentTeamStatsText = oWidget.addText(\n        \"胜: \" +\n        oOpponentTeam.record.wins +\n        \" - 负: \" +\n        oOpponentTeam.record.losses\n      );\n      oOpponentTeamStatsText.font = Font.systemFont(9);\n      oOpponentTeamStatsText.textColor = getColorForCurrentAppearance();\n\n      const oOpponentTeamStandingsText = oWidget.addText(\n        \"联盟: \" +\n        oOpponentTeam.record.confRank +\n        \".\" +\n        \" | 分区: \" +\n        oOpponentTeam.record.divRank +\n        \".\"\n      );\n      oOpponentTeamStandingsText.font = Font.systemFont(9);\n      oOpponentTeamStandingsText.textColor = getColorForCurrentAppearance();\n\n      if (oOpponentTeam.topscorer.name != null) {\n        const oOpponentTeamTopScorerText = oWidget.addText(\n          `${oOpponentTeam.topscorer.name} (${oOpponentTeam.topscorer.value})`\n        );\n        oOpponentTeamTopScorerText.font = Font.systemFont(9);\n        oOpponentTeamTopScorerText.textColor = getColorForCurrentAppearance();\n      }\n    }\n\n    if (SHOW_STATS_AND_STANDINGS) {\n      const oDivider = oWidget.addText(`___________________________`);\n      oDivider.font = Font.boldSystemFont(6);\n      oDivider.textColor = getColorForCurrentAppearance();\n\n      oWidget.addSpacer(6);\n\n      const oBottomStack = oWidget.addStack();\n      oBottomStack.layoutHorizontally();\n\n      const oBottomTextStack = oBottomStack.addStack();\n      oBottomTextStack.layoutVertically();\n\n      const oMyTeamStatsText = oBottomTextStack.addText(\n        \"胜: \" + oMyTeam.record.wins + \" - 负: \" + oMyTeam.record.losses\n      );\n      oMyTeamStatsText.font = Font.systemFont(9);\n      oMyTeamStatsText.textColor = getColorForCurrentAppearance();\n\n      const oMyTeamStandingsText = oBottomTextStack.addText(\n        \"联盟: \" +\n        oMyTeam.record.confRank +\n        \".\" +\n        \" | 分区: \" +\n        oMyTeam.record.divRank +\n        \".\"\n      );\n      oMyTeamStandingsText.font = Font.systemFont(9);\n      oMyTeamStandingsText.textColor = getColorForCurrentAppearance();\n\n      if (oMyTeam.topscorer.name != null) {\n        const oMyTeamTopScorerText = oBottomTextStack.addText(\n          `${oMyTeam.topscorer.name} (${oMyTeam.topscorer.value})`\n        );\n        oMyTeamTopScorerText.font = Font.systemFont(9);\n        oMyTeamTopScorerText.textColor = getColorForCurrentAppearance();\n      }\n\n      oBottomStack.addSpacer();\n\n      const oMyTeamLogoImage = await loadLogo(\n        oMyTeam.logoLink,\n        oMyTeam.abbreviation\n      );\n      const oMyTeamLogo = oBottomStack.addImage(oMyTeamLogoImage);\n      oMyTeamLogo.imageSize = new Size(25, 25);\n    }\n  } else {\n    const oHeadingText = oWidget.addText(`没有即将举行的比赛——赛季结束.`);\n    oHeadingText.font = Font.boldSystemFont(11);\n    oHeadingText.textColor = getColorForCurrentAppearance();\n\n    oWidget.addSpacer();\n  }\n}\n\n\/**\n * Add data to medium sized widget.\n *\n * @param {ListWidget} oWidget\n *\/\nasync function addMediumWidgetData(oWidget) {\n  const oGameData = await prepareData();\n\n  const oTopRow = oWidget.addStack();\n  \/\/ await setStackBackground(oTopRow);\n  oTopRow.cornerRadius = 12;\n  oTopRow.size = new Size(308, 15);\n  oTopRow.setPadding(7, 7, 7, 7);\n  oTopRow.layoutVertically();\n\n  const oSpacerStack1 = oTopRow.addStack();\n  oSpacerStack1.layoutHorizontally();\n  oSpacerStack1.addSpacer();\n\n  if (oGameData != null) {\n    const oHeadingStack = oTopRow.addStack();\n    oHeadingStack.layoutHorizontally();\n    oHeadingStack.addSpacer();\n    oHeadingStack.setPadding(7, 7, 7, 7);\n\n    let oHeadingText;\n    if (\n      oGameData.gameStatus != undefined &&\n      oGameData.gameStatus != \"\" &&\n      oGameData.homeTeam.liveScore != \"-\" &&\n      SHOW_LIVE_SCORES\n    ) {\n      oHeadingText = oHeadingStack.addText(`${oGameData.gameStatus}`);\n    } else {\n      const dGameDate = new Date(oGameData.gameDate);\n      const dLocalDate = dGameDate.toLocaleString([], {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n      oHeadingText = oHeadingStack.addText(\n        `${dLocalDate} ♗ ${oGameData.venue}`\n      );\n    }\n    oHeadingText.font = Font.boldSystemFont(11);\n    oHeadingText.textColor = getColorForCurrentAppearance();\n\n    oHeadingStack.addSpacer();\n\n    const oSpacerStack2 = oTopRow.addStack();\n    oSpacerStack2.layoutHorizontally();\n    oSpacerStack2.addSpacer();\n\n    oWidget.addSpacer();\n\n    const oNextGameStack = oWidget.addStack();\n    oNextGameStack.layoutHorizontally();\n    oNextGameStack.cornerRadius = 12;\n\n    const oHomeTeamStack = oNextGameStack.addStack();\n    oHomeTeamStack.layoutVertically();\n    oHomeTeamStack.centerAlignContent();\n    oHomeTeamStack.setPadding(7, 7, 7, 7);\n    \/\/ await setStackBackground(oHomeTeamStack);\n    oHomeTeamStack.cornerRadius = 12;\n    oHomeTeamStack.size = new Size(150, 0);\n\n    const oHomeTeamLogoStack = oHomeTeamStack.addStack();\n    oHomeTeamLogoStack.layoutHorizontally();\n\n    const oHomeLogoImage = await loadLogo(\n      oGameData.homeTeam.logoLink,\n      oGameData.homeTeam.abbreviation\n    );\n    const oHomeLogo = oHomeTeamLogoStack.addImage(oHomeLogoImage);\n    oHomeLogo.imageSize = new Size(40, 40);\n\n    if (SHOW_LIVE_SCORES) {\n      const iHomeTeamLiveScore = oGameData.homeTeam.liveScore;\n      const iHomeTeamLiveScoreSpacer =\n        iHomeTeamLiveScore < 99 || iHomeTeamLiveScore === \"-\" ? 45 : 25;\n      oHomeTeamLogoStack.addSpacer(iHomeTeamLiveScoreSpacer);\n      const oHomeTeamGoalsText = oHomeTeamLogoStack.addText(\n        `${iHomeTeamLiveScore}`\n      );\n      oHomeTeamGoalsText.font = Font.boldSystemFont(35);\n      oHomeTeamGoalsText.textColor = getColorForCurrentAppearance();\n    }\n\n    if (SHOW_STATS_AND_STANDINGS) {\n      const oHomeTeamStatsText = oHomeTeamStack.addText(\n        \"胜: \" +\n        oGameData.homeTeam.record.wins +\n        \" - 负: \" +\n        oGameData.homeTeam.record.losses\n      );\n      oHomeTeamStatsText.font = Font.systemFont(11);\n      oHomeTeamStatsText.textColor = getColorForCurrentAppearance();\n\n      const oHomeTeamStandingsText = oHomeTeamStack.addText(\n        \"联盟排名: \" +\n        oGameData.homeTeam.record.confRank +\n        \".\" +\n        \" | 分区排名: \" +\n        oGameData.homeTeam.record.divRank +\n        \".\"\n      );\n      oHomeTeamStandingsText.font = Font.systemFont(9);\n      oHomeTeamStandingsText.textColor = getColorForCurrentAppearance();\n\n      if (oGameData.homeTeam.topscorer.name != null) {\n        const oHomeTeamTopScorerText = oHomeTeamStack.addText(\n          `${oGameData.homeTeam.topscorer.name} (${oGameData.homeTeam.topscorer.value})`\n        );\n        oHomeTeamTopScorerText.centerAlignText();\n        oHomeTeamTopScorerText.font = Font.systemFont(9);\n        oHomeTeamTopScorerText.textColor = getColorForCurrentAppearance();\n      }\n    }\n    oNextGameStack.addSpacer();\n\n    const oAwayTeamStack = oNextGameStack.addStack();\n    oAwayTeamStack.layoutVertically();\n    oAwayTeamStack.centerAlignContent();\n    oAwayTeamStack.setPadding(7, 7, 7, 7);\n    \/\/ await setStackBackground(oAwayTeamStack);\n    oAwayTeamStack.cornerRadius = 12;\n    oAwayTeamStack.size = new Size(150, 0);\n\n    const oAwayTeamLogoStack = oAwayTeamStack.addStack();\n    oAwayTeamLogoStack.layoutHorizontally();\n\n    const oAwayLogoImage = await loadLogo(\n      oGameData.awayTeam.logoLink,\n      oGameData.awayTeam.abbreviation\n    );\n    const oAwayLogo = oAwayTeamLogoStack.addImage(oAwayLogoImage);\n    oAwayLogo.imageSize = new Size(40, 40);\n\n    if (SHOW_LIVE_SCORES) {\n      const iAwayTeamLiveScore = oGameData.awayTeam.liveScore;\n      const iSpacer =\n        iAwayTeamLiveScore < 99 || iAwayTeamLiveScore === \"-\" ? 45 : 25;\n      oAwayTeamLogoStack.addSpacer(iSpacer);\n\n      const oAwayTeamGoalsText = oAwayTeamLogoStack.addText(\n        `${iAwayTeamLiveScore}`\n      );\n      oAwayTeamGoalsText.font = Font.boldSystemFont(35);\n      oAwayTeamGoalsText.textColor = getColorForCurrentAppearance();\n    }\n\n    if (SHOW_STATS_AND_STANDINGS) {\n      const oAwayTeamStatsText = oAwayTeamStack.addText(\n        \"胜: \" +\n        oGameData.awayTeam.record.wins +\n        \" - 负: \" +\n        oGameData.awayTeam.record.losses\n      );\n      oAwayTeamStatsText.font = Font.systemFont(11);\n      oAwayTeamStatsText.textColor = getColorForCurrentAppearance();\n\n      const oAwayTeamStandingsText = oAwayTeamStack.addText(\n        \"联盟排名: \" +\n        oGameData.awayTeam.record.confRank +\n        \".\" +\n        \" | 分区排名: \" +\n        oGameData.awayTeam.record.divRank +\n        \".\"\n      );\n      oAwayTeamStandingsText.font = Font.systemFont(9);\n      oAwayTeamStandingsText.textColor = getColorForCurrentAppearance();\n\n      if (oGameData.awayTeam.topscorer.name != null) {\n        const oAwayTeamTopScorerText = oAwayTeamStack.addText(\n          `${oGameData.awayTeam.topscorer.name} (${oGameData.awayTeam.topscorer.value})`\n        );\n        oAwayTeamTopScorerText.font = Font.systemFont(9);\n        oAwayTeamTopScorerText.textColor = getColorForCurrentAppearance();\n      }\n    }\n\n    oWidget.addSpacer();\n\n    const oFutureGamesStack = oWidget.addStack();\n    oFutureGamesStack.layoutHorizontally();\n    oFutureGamesStack.centerAlignContent();\n    \/\/ await setStackBackground(oFutureGamesStack);\n    oFutureGamesStack.cornerRadius = 12;\n    oFutureGamesStack.setPadding(3, 7, 3, 7);\n    oFutureGamesStack.addSpacer();\n    oFutureGamesStack.size = new Size(308, 0);\n\n    for (let i = 0; i < oGameData.nextGames.length; i++) {\n      const oNextGame = oGameData.nextGames[i];\n\n      const oFutureGame = oFutureGamesStack.addStack();\n      oFutureGame.layoutHorizontally();\n      oFutureGame.addSpacer();\n\n      const oFutureGameLogoImage = await loadLogo(\n        oNextGame.opponent.logoLink,\n        oNextGame.opponent.abbreviation\n      );\n      const oNextGameLogo = oFutureGame.addImage(oFutureGameLogoImage);\n      oNextGameLogo.imageSize = new Size(15, 15);\n\n      const dGameDate = new Date(oNextGame.gameDate);\n      const dLocalDate = dGameDate.toLocaleString([], {\n        month: \"numeric\",\n        day: \"numeric\",\n      });\n      const oNextGameText = oFutureGame.addText(` ${dLocalDate}`);\n      oNextGameText.font = Font.systemFont(11);\n      oNextGameText.textColor = getColorForCurrentAppearance();\n\n      oFutureGame.addSpacer();\n    }\n\n    oFutureGamesStack.addSpacer();\n  } else {\n    const oHeadingStack = oTopRow.addStack();\n    oHeadingStack.layoutHorizontally();\n    oHeadingStack.addSpacer();\n    oHeadingStack.setPadding(7, 7, 7, 7);\n\n    const oHeadingText = oHeadingStack.addText(\n      `没有即将举行的比赛——赛季结束`\n    );\n    oHeadingText.font = Font.boldSystemFont(11);\n    oHeadingText.textColor = getColorForCurrentAppearance();\n\n    oHeadingStack.addSpacer();\n\n    const oSpacerStack2 = oTopRow.addStack();\n    oSpacerStack2.layoutHorizontally();\n    oSpacerStack2.addSpacer();\n\n    oWidget.addSpacer();\n  }\n}\n\n\/**\n * Prepares data.\n *\n * @return {Object[]}\n *\/\nasync function prepareData() {\n  const oData = {\n    gameDate: \"\",\n    gameStatus: \"\",\n    venue: \"\",\n    nextGames: [],\n    homeTeam: {\n      abbreviation: \"\",\n      logoLink: \"\",\n      record: {\n        wins: \"\",\n        losses: \"\",\n        confRank: \"\",\n        divRank: \"\",\n      },\n      liveScore: \"\",\n      topscorer: {\n        name: null,\n        value: \"\",\n      },\n    },\n    awayTeam: {\n      abbreviation: \"\",\n      logoLink: \"\",\n      record: { wins: \"\", losses: \"\", confRank: \"\", divRank: \"\" },\n      liveScore: \"\",\n      topscorer: {\n        name: null,\n        value: \"\",\n      },\n    },\n  };\n\n  const oTeamData = getTeamData();\n  let aScheduleData = await fetchScheduleData(oTeamData);\n\n  if (aScheduleData && aScheduleData.length > 0) {\n    const oNextGame = aScheduleData[0];\n    const aAllPlayers = await fetchPlayers();\n\n    if (oNextGame != undefined) {\n      const aStandings = await fetchStandings();\n      const oHomeTeam = filterTeamDataById(oNextGame.h.tid, oTeamData);\n      const oHomeTeamStandings = filterStandingsById(\n        oNextGame.h.tid,\n        aStandings\n      );\n      const oHomeTeamTopScorer = await fetchTopScorer(oHomeTeam, aAllPlayers);\n\n      const oAwayTeam = filterTeamDataById(oNextGame.v.tid, oTeamData);\n      const oAwayTeamStandings = filterStandingsById(\n        oNextGame.v.tid,\n        aStandings\n      );\n      const oAwayTeamTopScorer = await fetchTopScorer(oAwayTeam, aAllPlayers);\n\n      oData.gameDate = oNextGame.utctm;\n      oData.venue = oHomeTeam.location;\n      oData.nextGames = getNextGames(aScheduleData, oTeamData);\n      oData.homeTeam.abbreviation = oHomeTeam.abbreviation;\n      oData.homeTeam.logoLink = oHomeTeam.logo;\n      oData.homeTeam.record = {\n        wins: oHomeTeamStandings.win,\n        losses: oHomeTeamStandings.loss,\n        confRank: oHomeTeamStandings.confRank,\n        divRank: oHomeTeamStandings.divRank,\n      };\n      oData.awayTeam.abbreviation = oAwayTeam.abbreviation;\n      oData.awayTeam.logoLink = oAwayTeam.logo;\n      oData.awayTeam.record = {\n        wins: oAwayTeamStandings.win,\n        losses: oAwayTeamStandings.loss,\n        confRank: oAwayTeamStandings.confRank,\n        divRank: oAwayTeamStandings.divRank,\n      };\n      if (oHomeTeamTopScorer.name != null) {\n        oData.homeTeam.topscorer.name = oHomeTeamTopScorer.name;\n        oData.homeTeam.topscorer.value = oHomeTeamTopScorer.value;\n      }\n      if (oAwayTeamTopScorer.name != null) {\n        oData.awayTeam.topscorer.name = oAwayTeamTopScorer.name;\n        oData.awayTeam.topscorer.value = oAwayTeamTopScorer.value;\n      }\n\n      if (SHOW_LIVE_SCORES) {\n        const oLiveData = await fetchLiveData(oNextGame.gid, oNextGame.etm);\n        oData.homeTeam.liveScore = oLiveData.homeTeamScore;\n        oData.awayTeam.liveScore = oLiveData.awayTeamScore;\n        oData.gameStatus = oLiveData.statusText;\n      }\n    }\n  } else {\n    return null;\n  }\n\n  return oData;\n}\n\n\/**\n * Filters team data by its id.\n *\n * @param {String} sTeamId\n * @param {Object} oTeamData\n * @return {Object}\n *\/\nfunction filterTeamDataById(sTeamId, oTeamData) {\n  for (let key in oTeamData) {\n    if (oTeamData[key].id == sTeamId) {\n      return oTeamData[key];\n    }\n  }\n\n  return {};\n}\n\n\/**\n * 按团队ID进行排名.\n *\n * @param {String} sTeamId\n * @param {Object[]} aStandings\n * @return {Object[]}\n *\/\nfunction filterStandingsById(sTeamId, aStandings) {\n  return aStandings.filter((standing) => sTeamId == standing.teamId)[0];\n}\n\n\/**\n * 下一场比赛数据.\n *\n * @param {Object[]} aGames\n * @param {Object} oTeamData\n * @return {Object[]}\n *\/\nfunction getNextGames(aGames, oTeamData) {\n  const sMyTeamId = oTeamData[MY_NBA_TEAM].id;\n  const aNextGames = [];\n  const iLength = aGames.length < 5 ? aGames.length : 5;\n\n  for (let i = 1; i < iLength; i++) {\n    let oData = {\n      gameDate: \"\",\n      opponent: {\n        abbreviation: \"\",\n        logoLink: \"\",\n      },\n    };\n\n    const oGame = aGames[i];\n    oData.gameDate = oGame.etm;\n\n    if (oGame.h.tid == sMyTeamId) {\n      const oAwayTeam = filterTeamDataById(oGame.v.tid, oTeamData);\n      oData.opponent.abbreviation = oAwayTeam.abbreviation;\n      oData.opponent.logoLink = oAwayTeam.logo;\n    } else {\n      const oHomeTeam = filterTeamDataById(oGame.h.tid, oTeamData);\n      oData.opponent.abbreviation = oHomeTeam.abbreviation;\n      oData.opponent.logoLink = oHomeTeam.logo;\n    }\n\n    aNextGames.push(oData);\n  }\n\n  return aNextGames;\n}\n\n\/**\n * 从NBA API获取时间表数据.\n *\n * @param {Object} oTeamData\n * @return {Object[]}\n *\/\nasync function fetchScheduleData(oTeamData) {\n  const sMyTeam = oTeamData[MY_NBA_TEAM].simpleName.toLowerCase();\n  const sCurrentSeasonStartYear = CURRENT_SEASON_START_YEAR;\n  const sUrl = `https:\/\/data.nba.com\/data\/v2015\/json\/mobile_teams\/nba\/${sCurrentSeasonStartYear}\/teams\/${sMyTeam}_schedule.json`;\n  const oRequest = new Request(sUrl);\n  const oResponse = await oRequest.loadJSON();\n\n  if (oResponse) {\n    const dStartDate = new Date();\n\n    \/\/ Games in Europe are after midnight, so subtract 6 hours\n    dStartDate.setHours(dStartDate.getHours() - 6);\n\n    const aAllGames = oResponse.gscd.g;\n    const aNextGames = aAllGames.filter((game) => {\n      const dDate = new Date(game.gdte);\n\n      if (\n        new Date(dDate.toDateString()) >= new Date(dStartDate.toDateString())\n      ) {\n        game.utctm = game.gdtutc + \"T\" + game.utctm + \":00Z\";\n        return game;\n      }\n    });\n    return aNextGames;\n  }\n\n  return [];\n}\n\n\/**\n *从NBA API获取所有球员数据.\n *\n * @return {Object[]}\n *\/\nasync function fetchPlayers() {\n  const sCurrentSeasonStartYear = CURRENT_SEASON_START_YEAR;\n  const sUrl = `http:\/\/data.nba.net\/data\/10s\/prod\/v1\/${sCurrentSeasonStartYear}\/players.json`;\n  const oRequest = new Request(sUrl);\n  const oResponse = await oRequest.loadJSON();\n  return oResponse.league.standard;\n}\n\n\/**\n * 从NBA API获取当前的排名数据.\n *\n * @return {Object[]}\n *\/\nasync function fetchStandings() {\n  const sUrl = `http:\/\/data.nba.net\/data\/10s\/prod\/v1\/current\/standings_all.json`;\n  const oRequest = new Request(sUrl);\n  const oResponse = await oRequest.loadJSON();\n  return oResponse.league.standard.teams;\n}\n\n\/**\n * 从NBA API获取最高得分手数据.\n *\n * @param {string} sTeamId\n * @return {Object}\n *\/\nasync function fetchTopScorer(oTeamData, aAllPlayers) {\n  const sCurrentSeasonStartYear = CURRENT_SEASON_START_YEAR;\n  const sUrl = `https:\/\/data.nba.net\/data\/10s\/prod\/v1\/${sCurrentSeasonStartYear}\/teams\/${oTeamData.shortName}\/leaders.json`;\n  const oRequest = new Request(sUrl);\n  const oTopScorers = await oRequest.loadJSON();\n\n  let oResult = {\n    name: null,\n    value: \"\",\n  };\n  if (oTopScorers) {\n    const oTopScorer = oTopScorers.league.standard.ppg[0];\n    const sPlayerId = oTopScorer.personId;\n    const oPlayer = aAllPlayers.filter(\n      (player) => player.personId == sPlayerId\n    )[0];\n\n    oResult.name = `${oPlayer.firstName} ${oPlayer.lastName}`;\n    oResult.value = oTopScorer.value;\n  }\n\n  return oResult;\n}\n\n\/**\n * 从NBA API获取实时排名数据.\n *\n * @param {string} sGameId\n * @return {Object}\n *\/\nasync function fetchLiveData(sGameId, sDate) {\n  const sUrl = `https:\/\/cdn.nba.com\/static\/json\/liveData\/scoreboard\/todaysScoreboard_00.json`;\n  const oRequest = new Request(sUrl);\n  const oLiveData = await oRequest.loadJSON();\n  if (oLiveData !== undefined) {\n    const aGamesToday = oLiveData.scoreboard.games;\n    const oGameToday = aGamesToday.filter((game) => game.gameId == sGameId);\n    if (oGameToday.length > 0) {\n      const oGame = oGameToday[0];\n      return {\n        statusText: oGame.gameStatusText,\n        homeTeamScore:\n          oGame.period === 0 ? \"-\" : calculateScore(oGame.homeTeam.periods),\n        awayTeamScore:\n          oGame.period === 0 ? \"-\" : calculateScore(oGame.awayTeam.periods),\n      };\n    }\n  }\n\n  return {\n    statusText: null,\n    homeTeamScore: \"***\",\n    awayTeamScore: \"***\",\n  };\n}\n\n\/**\n * Calculates score for live data.\n *\n * @param {Object[]} aPeriodScores\n * @return {Number}\n *\/\nfunction calculateScore(aPeriodScores) {\n  let iResultScore = 0;\n  aPeriodScores.forEach(\n    (oPeriodScore) => (iResultScore += parseInt(oPeriodScore.score))\n  );\n  return iResultScore;\n}\n\n\/**\n * Loads image from thesportsdb.com or from local cache.\n *\n * @param {String} sImageUrl\n * @param {String} sTeamAbbreviation\n * @return {Object}\n *\/\nasync function loadLogo(sImageUrl, sTeamAbbreviation) {\n  \/\/ 设置文件管理器.\n  const oFiles = FileManager.local();\n\n  \/\/ 设置缓存\n  const sCachePath = oFiles.joinPath(\n    oFiles.cacheDirectory(),\n    sTeamAbbreviation + \"_NBA\"\n  );\n  const bCacheExists = oFiles.fileExists(sCachePath);\n\n  let oResult;\n  try {\n    if (bCacheExists) {\n      oResult = oFiles.readImage(sCachePath);\n    } else {\n      const oRequest = new Request(sImageUrl);\n      oResult = await oRequest.loadImage();\n      try {\n        oFiles.writeImage(sCachePath, oResult);\n        console.log(\"缓存logo \" + sTeamAbbreviation);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  } catch (oError) {\n    console.error(oError);\n    if (bCacheExists) {\n      oResult = oFiles.readImage(sCachePath);\n    } else {\n      console.log(\"获取logo缓存 \" + sTeamAbbreviation + \" 失败.\");\n    }\n  }\n\n  return oResult;\n}\n\n\/**\n * 设置堆栈的背景.\n *\n * @param {String} oStack\n *\/\nasync function setStackBackground(oStack) {\n  if (\n    NO_BACKGROUND_INSTALLED &&\n    NO_BACKGROUND_ACTIVE &&\n    NO_BACKGROUND_FULL_ACTIVE\n  ) {\n    oStack.backgroundImage = await transparent(Script.name());\n  } else {\n    oStack.backgroundColor = STACK_BACKGROUND;\n  }\n}\n\n\/**\n * 返回颜色对象，具体取决于是否启用了暗模式.\n *\n * @return {Object}\n *\/\nfunction getColorForCurrentAppearance() {\n  return DARK_MODE ? Color.white() : Color.black();\n}\n\n\/**\n * 当未安装no-background.js时的占位符功能.\n *\n * @return {Object}\n *\/\nfunction emptyFunction() {\n\n  return {};\n}\n\n\/**\n * Returns static team data.\n *\n * @return {Object}\n *\/\nfunction getTeamData() {\n  return {\n    ATL: {\n      id: 1610612737,\n      abbreviation: \"ATL\",\n      teamName: \"Atlanta Hawks\",\n      simpleName: \"Hawks\",\n      shortName: \"hawks\",\n      location: \"Atlanta\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/cfcn1w1503741986.png\/preview\",\n    },\n    BOS: {\n      id: 1610612738,\n      abbreviation: \"BOS\",\n      teamName: \"Boston Celtics\",\n      simpleName: \"Celtics\",\n      shortName: \"celtics\",\n      location: \"Boston\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/051sjd1537102179.png\/preview\",\n    },\n    BKN: {\n      id: 1610612751,\n      abbreviation: \"BKN\",\n      teamName: \"Brooklyn Nets\",\n      simpleName: \"Nets\",\n      shortName: \"nets\",\n      location: \"Brooklyn\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/h0dwny1600552068.png\/preview\",\n    },\n    CHA: {\n      id: 1610612766,\n      abbreviation: \"CHA\",\n      teamName: \"Charlotte Hornets\",\n      simpleName: \"Hornets\",\n      shortName: \"hornets\",\n      location: \"Charlotte\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/xqtvvp1422380623.png\/preview\",\n    },\n    CHI: {\n      id: 1610612741,\n      abbreviation: \"CHI\",\n      teamName: \"Chicago Bulls\",\n      simpleName: \"Bulls\",\n      shortName: \"bulls\",\n      location: \"Chicago\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/yk7swg1547214677.png\/preview\",\n    },\n    CLE: {\n      id: 1610612739,\n      abbreviation: \"CLE\",\n      teamName: \"Cleveland Cavaliers\",\n      simpleName: \"Cavaliers\",\n      shortName: \"cavaliers\",\n      location: \"Cleveland\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/a2pp4c1503741152.png\/preview\",\n    },\n    DAL: {\n      id: 1610612742,\n      abbreviation: \"DAL\",\n      teamName: \"Dallas Mavericks\",\n      simpleName: \"Mavericks\",\n      shortName: \"mavericks\",\n      location: \"Dallas\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/yqrxrs1420568796.png\/preview\",\n    },\n    DEN: {\n      id: 1610612743,\n      abbreviation: \"DEN\",\n      teamName: \"Denver Nuggets\",\n      simpleName: \"Nuggets\",\n      shortName: \"nuggets\",\n      location: \"Denver\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/8o8j5k1546016274.png\/preview\",\n    },\n    DET: {\n      id: 1610612765,\n      abbreviation: \"DET\",\n      teamName: \"Detroit Pistons\",\n      simpleName: \"Pistons\",\n      shortName: \"pistons\",\n      location: \"Detroit\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/12612u1511101660.png\/preview\",\n    },\n    GSW: {\n      id: 1610612744,\n      abbreviation: \"GSW\",\n      teamName: \"Golden State Warriors\",\n      simpleName: \"Warriors\",\n      shortName: \"warriors\",\n      location: \"Golden State\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/irobi61565197527.png\/preview\",\n    },\n    HOU: {\n      id: 1610612745,\n      abbreviation: \"HOU\",\n      teamName: \"Houston Rockets\",\n      simpleName: \"Rockets\",\n      shortName: \"rockets\",\n      location: \"Houston\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/yezpho1597486052.png\/preview\",\n    },\n    IND: {\n      id: 1610612754,\n      abbreviation: \"IND\",\n      teamName: \"Indiana Pacers\",\n      simpleName: \"Pacers\",\n      shortName: \"pacers\",\n      location: \"Indiana\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/v6jzgm1503741821.png\/preview\",\n    },\n    LAC: {\n      id: 1610612746,\n      abbreviation: \"LAC\",\n      teamName: \"Los Angeles Clippers\",\n      simpleName: \"Clippers\",\n      shortName: \"clippers\",\n      location: \"Los Angeles\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/jv7tf21545916958.png\/preview\",\n    },\n    LAL: {\n      id: 1610612747,\n      abbreviation: \"LAL\",\n      teamName: \"Los Angeles Lakers\",\n      simpleName: \"Lakers\",\n      shortName: \"lakers\",\n      location: \"Los Angeles\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/44ubym1511102073.png\/preview\",\n    },\n    MEM: {\n      id: 1610612763,\n      abbreviation: \"MEM\",\n      teamName: \"Memphis Grizzlies\",\n      simpleName: \"Grizzlies\",\n      shortName: \"grizzlies\",\n      location: \"Memphis\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/m64v461565196789.png\/preview\",\n    },\n    MIA: {\n      id: 1610612748,\n      abbreviation: \"MIA\",\n      teamName: \"Miami Heat\",\n      simpleName: \"Heat\",\n      shortName: \"heat\",\n      location: \"Miami\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/5v67x51547214763.png\/preview\",\n    },\n    MIL: {\n      id: 1610612749,\n      abbreviation: \"MIL\",\n      teamName: \"Milwaukee Bucks\",\n      simpleName: \"Bucks\",\n      shortName: \"bucks\",\n      location: \"Milwaukee\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/qgyz6z1503742649.png\/preview\",\n    },\n    MIN: {\n      id: 1610612750,\n      abbreviation: \"MIN\",\n      teamName: \"Minnesota Timberwolves\",\n      simpleName: \"Timberwolves\",\n      shortName: \"timberwolves\",\n      location: \"Minnesota\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/b6a05s1503742837.png\/preview\",\n    },\n    NOP: {\n      id: 1610612740,\n      abbreviation: \"NOP\",\n      teamName: \"New Orleans Pelicans\",\n      simpleName: \"Pelicans\",\n      shortName: \"pelicans\",\n      location: \"New Orleans\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/f341s31523700397.png\/preview\",\n    },\n    NYK: {\n      id: 1610612752,\n      abbreviation: \"NYK\",\n      teamName: \"New York Knicks\",\n      simpleName: \"Knicks\",\n      shortName: \"knicks\",\n      location: \"New York\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/wyhpuf1511810435.png\/preview\",\n    },\n    OKC: {\n      id: 1610612760,\n      abbreviation: \"OKC\",\n      teamName: \"Oklahoma City Thunder\",\n      simpleName: \"Thunder\",\n      shortName: \"thunder\",\n      location: \"Oklahoma City\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/xpswpq1422575434.png\/preview\",\n    },\n    ORL: {\n      id: 1610612753,\n      abbreviation: \"ORL\",\n      teamName: \"Orlando Magic\",\n      simpleName: \"Magic\",\n      shortName: \"magic\",\n      location: \"Orlando\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/txuyrr1422492990.png\/preview\",\n    },\n    PHI: {\n      id: 1610612755,\n      abbreviation: \"PHI\",\n      teamName: \"Philadelphia 76ers\",\n      simpleName: \"76ers\",\n      shortName: \"sixers\",\n      location: \"Philadelphia\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/71545f1518464849.png\/preview\",\n    },\n    PHX: {\n      id: 1610612756,\n      abbreviation: \"PHX\",\n      teamName: \"Phoenix Suns\",\n      simpleName: \"Suns\",\n      shortName: \"suns\",\n      location: \"Phoenix\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/qrtuxq1422919040.png\/preview\",\n    },\n    POR: {\n      id: 1610612757,\n      abbreviation: \"POR\",\n      teamName: \"Portland Trail Blazers\",\n      simpleName: \"trail_blazers\",\n      shortName: \"blazers\",\n      location: \"Portland\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/mbtzin1520794112.png\/preview\",\n    },\n    SAC: {\n      id: 1610612758,\n      abbreviation: \"SAC\",\n      teamName: \"Sacramento Kings\",\n      simpleName: \"Kings\",\n      shortName: \"kings\",\n      location: \"Sacramento\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/nf6jii1511465735.png\/preview\",\n    },\n    SAS: {\n      id: 1610612759,\n      abbreviation: \"SAS\",\n      teamName: \"San Antonio Spurs\",\n      simpleName: \"Spurs\",\n      shortName: \"spurs\",\n      location: \"San Antonio\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/crit1q1511809636.png\/preview\",\n    },\n    TOR: {\n      id: 1610612761,\n      abbreviation: \"TOR\",\n      teamName: \"Toronto Raptors\",\n      simpleName: \"Raptors\",\n      shortName: \"raptors\",\n      location: \"Toronto\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/gitpi61503743151.png\/preview\",\n    },\n    UTA: {\n      id: 1610612762,\n      abbreviation: \"UTA\",\n      teamName: \"Utah Jazz\",\n      simpleName: \"Jazz\",\n      shortName: \"jazz\",\n      location: \"Utah\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/9p1e5j1572041084.png\/preview\",\n    },\n    WAS: {\n      id: 1610612764,\n      abbreviation: \"WAS\",\n      teamName: \"Washington Wizards\",\n      simpleName: \"Wizards\",\n      shortName: \"wizards\",\n      location: \"Washington\",\n      logo:\n        \"https:\/\/www.thesportsdb.com\/images\/media\/team\/badge\/m2qhln1503743635.png\/preview\",\n    },\n  };\n}\n\n\/**\n * Creates large sized widget.\n *\n * @return {ListWidget}\n *\/\nasync function createLargeWidget() {\n  \/\/ Initialise widget\n  const oWidget = new ListWidget();\n  oWidget.setPadding(10, 10, 10, 10);\n  oWidget.url =\n    \"https:\/\/mp.weixin.qq.com\/s\/xwa4P39JQzjFO6SCqBX_fQ\";\n\n  const oHeadingStack = oWidget.addStack();\n  oHeadingStack.layoutVertically();\n  oHeadingStack.setPadding(7, 7, 7, 7);\n\n  const oHeadingText = oHeadingStack.addText(\n    `\\u5f53\\u524d\\u4e0d\\u652f\\u6301\\u5927\\u5c3a\\u5bf8\\u5c0f\\u7ec4\\u4ef6\\u3002\\u4ec5\\u652f\\u6301\\u4e2d\\u5c0f\\u5c3a\\u5bf8\\u5c0f\\u7ec4\\u4ef6\\u3002\\u4e0d\\u77e5\\u9053\\u5982\\u4f55\\u4f7f\\u7528\\uff1f\\u5355\\u51fb\\u5c0f\\u7ec4\\u4ef6\\u4ee5\\u9605\\u8bfb\\u5b89\\u88c5\\u8bf4\\u660e .`\n  );\n  oHeadingText.font = Font.systemFont(16);\n  oHeadingText.textColor = Color.white();\n\n  return oWidget;\n}\n\n\nasync function loadImage(imgUrl) {\n  let req = new Request(imgUrl)\n  let image = await req.loadImage()\n  return image\n}\n\nasync function shadowImage(img) {\n  let ctx = new DrawContext()\n  \/\/ 把画布的尺寸设置成图片的尺寸\n  ctx.size = img.size\n  \/\/ 把图片绘制到画布中\n  ctx.drawImageInRect(img, new Rect(0, 0, img.size['width'], img.size['height']))\n  \/\/ 设置绘制的图层颜色，为半透明的黑色\n  ctx.setFillColor(new Color('#000000', 0.5))\n  \/\/ 绘制图层\n  ctx.fillRect(new Rect(0, 0, img.size['width'], img.size['height']))\n\n  \/\/ 导出最终图片\n  return await ctx.getImage()\n}\n\n\/********************************************************\n ************* MAKE SURE TO COPY EVERYTHING *************\n *******************************************************\/",
  "share_sheet_inputs" : [

  ]
}